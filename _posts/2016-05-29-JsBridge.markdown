---
layout: post
title:  "[Android] JsBridge. JavaScript and Java call each other"
date:   2016-05-29 12:55:00 +0800
categories: Android
---

It's common to show web page using WebView in native App. And there are a few ways to communicate with JavaScript and native code. `JsBridge` is one of the most favourite solutions.

## 1 JavaScript calls Java, Java calls JavaScript
There are 4 approaches to let JavaScript calls Java in Android:
1.JavascriptInterface;
2.WebViewClient.shouldOverrideUrlLoading();
3.WebChromeClient.onConsoleMessage();
4.WebChromeClient.onJsPrompt();

## 1.1 JavascriptInterface
This is the official approach providing by Google.
First, write a class with some kinds of method, which might be called by JavaScript.
{% highlight java%}
public class JavascriptInterface {

    @JavascriptInterface
    public void showToast(String toast) {
        Toast.makeText(MainActivity.this, toast, Toast.LENGTH_SHORT).show();
    }
}
{% endhighlight %}

Then, add this class into the WebView with `addJavascriptInterface()` method.
{% highlight java%}
webView.addJavascriptInterface(new JavascriptInterface(), "javascriptInterface");
{% endhighlight %}

Therefore, JavaScript is able to invoke the `showToast()` native method.
{% highlight javascript%}
function showToast(toast) {
    javascript:javascriptInterface.showToast(toast);
}
{% endhighlight %}

However, this official approach has a deadly security issue, until Android 4.2 provides the `@JavascriptInterface` annotation. Considering the lower Android version compability, it's not recommended to use it.

## 1.2 WebViewClient.shouldOverrideUrlLoading()
This API will be called whenever the web page is loading the Url. So that we can take advantage of this interface to let the web page to load a customized Url and then the `shouldOverrideUrlLoading` will invoke in the Java. Parse the Url and identify whether it is a normal Url jumping or the JavaScript is communicating with Java.
{% highlight java%}
public class CustomWebViewClient extends WebViewClient {

    @Override
    public boolean shouldOverrideUrlLoading(WebView view, String url) {
        if (isJsBridgeUrl(url)) {
            // handle your logic here
            return true;
        }
        return super.shouldOverrideUrlLoading(view, url);
    }
}
{% endhighlight %}

## 1.3 WebChromeClient.onConsoleMessage()
This API uses for debuging when JavaScript want to print log in the native console. In JavaScript, we can use it like this.
{% highlight javascript%}
console.log('log message that is going to native code')
{% endhighlight %}
And then it will trigger WebChromeClient.consoleMessage() in Java.
{% highlight java%}
public class CustomWebChromeClient extends WebChromeClient {

    @Override
    public boolean onConsoleMessage(ConsoleMessage consoleMessage) {
        super.onConsoleMessage(consoleMessage);
        //the value that is set in console.log in JavaScript
        String msg = consoleMessage.message();
    }
}
{% endhighlight %}

## 1.4 WebChromeClient.onJsPrompt()
In face, there are onJsPrompt(), onJsAlert(), onJsConfirm() and onJsPrompt() in JavaScript. Because onJsPrompt is seldomly used, it's suggested to use it as a approach to let JavaScript call Java. Make this call in JavaScript.
{% highlight javascript%}
window.prompt(message, value);
{% endhighlight %}
Then WebChromeClient.onJsPrompt() will be called in Java.
{% highlight java%}
public class CustomWebChromeClient extends WebChromeClient {

    @Override
    public boolean onJsPrompt(WebView view, String url, String message, String defaultValue, JsPromptResult result) {
        result.confirm();
        return true;
    }
}
{% endhighlight %}

## 1.5 Java calls JavaScript
Different from JavaScript calls Java, there is only one way to call JavaScript by Java, which is the WebView.loadUrl(). To call a JavaScript method with params, we can do it like this.
{% highlight java%}
webView.loadUrl(String.format("javascript:WebViewJavascriptBridge._handleMessageFromNative(%s)", data));
{% endhighlight %}

## 2 JsBridge
I'm going to introduce a [GitHub Android project: JsBridge][jsbrige_github].

## 2.1 flow char of JsBridge
![Alt text](https://raw.githubusercontent.com/wingyippp/blog/gh-pages/images/jsbridge_work_flow.jpg)

## 2.2 UML of the JsBridge
![Alt text](https://raw.githubusercontent.com/wingyippp/blog/gh-pages/images/1461754727_5_w1028_h502.jpg)

## 2.3 Principle of JsBridge

### 2.3.1 WebView loads html web page
webView.registerHandler("submitFromWeb", ...); The Java code register a method called `submitFromWeb` which can be invoked by JavaScript. Once JavaScript invokes `submitFromWeb`, the method `handler` of class `BridgeHandler` in Java will be trigger.

webView.callHandler("functionInJs", ..., new CallBackFunction()); It means that Java is trying to invoke the `functionInJs` method in JavaScript.
{% highlight java%}
public class MainActivity extends Activity implements OnClickListener {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        webView = (BridgeWebView) findViewById(R.id.webView);
        webView.loadUrl("file:///android_asset/demo.html");
        webView.registerHandler("submitFromWeb", new BridgeHandler() {

            @Override
            public void handler(String data, CallBackFunction function) {
                Log.i(TAG, "handler = submitFromWeb, data from web = " + data);
                function.onCallBack("submitFromWeb exe, response data 中文 from Java");
            }

        });

        webView.callHandler("functionInJs", new Gson().toJson(user), new CallBackFunction() {
            @Override
            public void onCallBack(String data) {
                
            }
        });
    }
}
{% endhighlight %}

Inside the `callHandler`, it will invoke the `doSend`. m.setCallbackId(callbackStr), The `callbackStr` not only will be sent to JavaScript, but also will be save as key-value with `responseCallback` into the map of `responseCallbacks`, which is able to  retrieve the `responseCallback` by the `callbackStr` when JavaScript returns the result to Java.
{% highlight java%}
private void doSend(String handlerName, String data, CallBackFunction responseCallback) {
        Message m = new Message();
        if (!TextUtils.isEmpty(data)) {
            m.setData(data);
        }
        if (responseCallback != null) {
            String callbackStr = String.format(BridgeUtil.CALLBACK_ID_FORMAT, ++uniqueId + (BridgeUtil.UNDERLINE_STR + SystemClock.currentThreadTimeMillis()));
            responseCallbacks.put(callbackStr, responseCallback);
            m.setCallbackId(callbackStr);
        }
        if (!TextUtils.isEmpty(handlerName)) {
            m.setHandlerName(handlerName);
        }
        queueMessage(m);
    }
{% endhighlight %}

BridgeWebView.dispatchMessage(Message m), we found that `dispatchMessage` actually is invoking the system API `loadUrl`, in which that it's calling the _handleMessageFromNative method in JavaScript.
{% highlight java%}
final static String JS_HANDLE_MESSAGE_FROM_JAVA = "javascript:WebViewJavascriptBridge._handleMessageFromNative('%s');";

void dispatchMessage(Message m) {
        String messageJson = m.toJson();
        //escape special characters for json string
        messageJson = messageJson.replaceAll("(\\\\)([^utrn])", "\\\\\\\\$1$2");
        messageJson = messageJson.replaceAll("(?<=[^\\\\])(\")", "\\\\\"");
        String javascriptCommand = String.format(BridgeUtil.JS_HANDLE_MESSAGE_FROM_JAVA, messageJson);
        if (Thread.currentThread() == Looper.getMainLooper().getThread()) {
            this.loadUrl(javascriptCommand);
        }
    }
{% endhighlight %}

### 2.3.2 load the WebViewJavascriptBridge.js
In the webViewClient.onPageFinished() method, BridgeUtil.webViewLoadLocalJs(view, BridgeWebView.toLoadJs) is loading the JavaScript in the assert/WebViewJavascriptBridge.js into WebView.
{% highlight java%}
public class BridgeWebViewClient extends WebViewClient {
　　
    @Override
    public void onPageFinished(WebView view, String url) {
        super.onPageFinished(view, url);

        if (BridgeWebView.toLoadJs != null) {
            BridgeUtil.webViewLoadLocalJs(view, BridgeWebView.toLoadJs);
        }

        //
        if (webView.getStartupMessage() != null) {
            for (Message m : webView.getStartupMessage()) {
                webView.dispatchMessage(m);
            }
            webView.setStartupMessage(null);
        }
    }
}
{% endhighlight %}

### 2.3.3 Analyse the WebViewJavascriptBridge.js
We can find the _handleMessageFromNative() method in this JavaScript. Actually it is calling the _dispatchMessageFromNative() method. The message from Java will handled in the else branch. Initialize a `responseCallback` that will be used to send result back to Java. Then retrieve the `handler` base on the message.handlerName. Run the `handler` with message.data.
{% highlight java %}
function _dispatchMessageFromNative(messageJSON) {
    setTimeout(function() {
        var message = JSON.parse(messageJSON);
        var responseCallback;
        //java call finished, now need to call js callback function
        if (message.responseId) {
            ...
        } else {
            //直接发送
            if (message.callbackId) {
                var callbackResponseId = message.callbackId;
                responseCallback = function(responseData) {
                    _doSend({
                        responseId: callbackResponseId,
                        responseData: responseData
                    });
                };
            }

            var handler = WebViewJavascriptBridge._messageHandler;
            if (message.handlerName) {
                handler = messageHandlers[message.handlerName];
            }
            //查找指定handler
            try {
                handler(message.data, responseCallback);
            } catch (exception) {
                if (typeof console != 'undefined') {
                    console.log("WebViewJavascriptBridge: WARNING: javascript handler threw.", message, exception);
                }
            }
        }
    });
} 
{% endhighlight %}

### 2.3.4 HTML register the 'functionInJs' method
Where is the `messageHandler`? The answer is in the demo.html, the HTML that WebView is loaded.
{% highlight html%}
<html>
    <head>
    ...
    </head>
    <body>
    ...
    </body>
    <script>
        ...

        connectWebViewJavascriptBridge(function(bridge) {
            bridge.init(function(message, responseCallback) {
                console.log('JS got a message', message);
                var data = {
                    'Javascript Responds': '测试中文!'
                };
                console.log('JS responding with', data);
                responseCallback(data);
            });

            bridge.registerHandler("functionInJs", function(data, responseCallback) {
                document.getElementById("show").innerHTML = ("data from Java: = " + data);
                var responseData = "Javascript Says Right back aka!";
                responseCallback(responseData);
            });
        })
    </script>
</html>
{% endhighlight %}

### 2.3.5 `functionInJs` return the result back to Java
Once `functionInJs` finished it will call the `responseCallback`, which will call the `_doSend`. The message will be push to the `sendMessageQueue`. Then modify the messagingIframe.src, so that the web page will load the url, which triggers the WebViewClient.shouldOverrideUrlLoading() in Java.
{% highlight javascript%}
function _doSend(message, responseCallback) {
    if (responseCallback) {
        var callbackId = 'cb_' + (uniqueId++) + '_' + new Date().getTime();
        responseCallbacks[callbackId] = responseCallback;
        message.callbackId = callbackId;
    }

    sendMessageQueue.push(message);
    messagingIframe.src = CUSTOM_PROTOCOL_SCHEME + '://' + QUEUE_HAS_MESSAGE;
}
{% endhighlight %}

In Java, the shouldOverridgeUrlLoading() method will invoke the webView.flushMessageQueue() method.
{% highlight java %}
@Override
public boolean shouldOverrideUrlLoading(WebView view, String url) {
    try {
        url = URLDecoder.decode(url, "UTF-8");
    } catch (UnsupportedEncodingException e) {
        e.printStackTrace();
    }

    if (url.startsWith(BridgeUtil.YY_RETURN_DATA)) {
        webView.handlerReturnData(url);
        return true;
    } else if (url.startsWith(BridgeUtil.YY_OVERRIDE_SCHEMA)) { //
        webView.flushMessageQueue();
        return true;
    } else {
        return super.shouldOverrideUrlLoading(view, url);
    }
}
{% endhighlight %}

webView.flushMessageQueue() will call the JavaScript method _flushQueue with the `CallbackFunction`. The _flushQueue of JavaScript will fetch all the message in the `sendMessageQueue` to Java. Then `CallBackFunction` will parse the messageQueue and handle all the message one by one. Therefore, the callback of `functionInJs` will invoked.
{% highlight java%}
void flushMessageQueue() {
    if (Thread.currentThread() == Looper.getMainLooper().getThread()) {
        loadUrl(BridgeUtil.JS_FETCH_QUEUE_FROM_JAVA, new CallBackFunction() {

            @Override
            public void onCallBack(String data) {
                // deserializeMessage
                List<Message> list = null;
                try {
                    list = Message.toArrayList(data);
                } catch (Exception e) {
                    e.printStackTrace();
                    return;
                }
                if (list == null || list.size() == 0) {
                    return;
                }
                for (int i = 0; i < list.size(); i++) {
                    ...
                }
            }
        });
    }
}
{% endhighlight %}


That is how the JsBridge work when Java calls JavaScript, which is quite similar with the case JavsScript calls Java.

# References

[好好和h5沟通！几种常见的hybrid通信方式；][reference#1]

[Android 利用WebViewJavascriptBridge 实现js和java的交互；][reference#2]

[GitHub：lzyzsd/JsBridge；][jsbrige_github]



[jsbrige_github]: https://github.com/lzyzsd/JsBridge
[reference#1]: http://zjutkz.net/2016/04/17/%E5%A5%BD%E5%A5%BD%E5%92%8Ch5%E6%B2%9F%E9%80%9A%EF%BC%81%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84hybrid%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F/
[reference#2]: http://blog.csdn.net/sk719887916/article/details/47189607